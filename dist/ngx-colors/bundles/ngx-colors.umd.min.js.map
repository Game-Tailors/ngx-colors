{"version":3,"sources":["../../../projects/ngx-colors/src/lib/enums/formats.ts","../../../projects/ngx-colors/src/lib/clases/formats.ts","../../../projects/ngx-colors/src/lib/services/converter.service.ts","../../../projects/ngx-colors/src/lib/helpers/default-colors.ts","../../../projects/ngx-colors/src/lib/helpers/formats.ts","../../../projects/ngx-colors/src/lib/components/panel/panel.component.ts","../../../projects/ngx-colors/src/lib/services/panel-factory.service.ts","../../../projects/ngx-colors/src/lib/directives/ngx-colors-trigger.directive.ts","../../../projects/ngx-colors/src/lib/ngx-colors.component.ts","../../../projects/ngx-colors/src/lib/components/icons/icons.component.ts","../../../projects/ngx-colors/src/lib/clases/slider.ts","../../../projects/ngx-colors/src/lib/components/color-picker/color-picker.component.ts","../../../projects/ngx-colors/src/lib/directives/slider.directive.ts","../../../projects/ngx-colors/src/lib/ngx-colors.module.ts","../../../projects/ngx-colors/src/lib/clases/color.ts"],"names":["ColorFormats","Rgba","r","g","b","a","this","prototype","denormalize","Math","round","toString","toPrecision","Hsva","h","s","v","onChange","EventEmitter","onColorChange","value","rgX","rgY","onHueChange","onValueChange","onAlphaChange","Hsla","l","Cmyk","c","m","y","k","ConverterService","toFormat","hsva","format","output","HEX","rgba","hsvaToRgba","rgbaToHex","HSLA","hsla","hsva2hsla","RGBA","CMYK","rgbaToCmyk","stringToFormat","color","stringToHsva","abs","hsla2hsva","min","i","floor","f","p","q","t","cmykToRgb","cmyk","max","rgbaToHsva","d","allowHex8","hex","substr","normalizeCMYK","denormalizeCMYK","denormalizeRGBA","colorString","toLowerCase","stringParsers","re","parse","execResult","parseInt","isNaN","parseFloat","key","push","hasOwnProperty","parser","match","exec","outputFormat","getFormatByString","test","Injectable","defaultColors","preview","variants","formats","PanelComponent","service","previewColor","colorsAnimationEffect","palette","colorFormats","canChangeFormat","menu","hideColorPicker","hideTextInput","click","event","isOutside","emitClose","onScroll","setPosition","onResize","ngOnInit","iniciate","triggerInstance","triggerElementRef","animation","acceptLabel","includes","indexOf","setColor","console","error","viewportOffset","nativeElement","getBoundingClientRect","top","height","left","window","innerWidth","right","hasVariant","_this","some","toUpperCase","isSelected","getBackgroundColor","background","changeColor","onChangeColorPicker","changeColorManual","setPreviewColor","showColors","onColorClick","addColor","nextFormat","length","close","target","classList","contains","Component","args","selector","template","animations","trigger","transition","query","style","opacity","optional","stagger","animate","keyframes","transform","offset","HostListener","HostBinding","PanelFactoryService","resolver","applicationRef","injector","createPanel","undefined","componentRef","removePanel","factory","resolveComponentFactory","create","attachView","hostView","domElem","rootNodes","overlay","document","createElement","id","add","body","appendChild","detachView","destroy","remove","ComponentFactoryResolver","ApplicationRef","Injector","NgxColorsTriggerDirective","triggerRef","panelFactory","colorsAnimation","change","input","onTouchedCallback","onChangeCallback","onClick","open","panelRef","instance","writeValue","emit","Object","defineProperty","registerOnChange","fn","registerOnTouched","Directive","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","Input","Output","NgxColorsComponent","triggerDirective","subscribe","encapsulation","ViewEncapsulation","None","decorators","type","Host","IconsComponent","SliderPosition","SliderDimension","ColorPickerComponent","colorChange","selectedColor","fallbackColor","slider","hueWidth","hueSlider","offsetWidth","alphaWidth","alphaSlider","sliderDimMax","update","ngOnDestroy","ngOnChanges","changes","ngAfterViewInit","onSliderChange","outputColor","hue","hueSliderColor","alphaSliderColor","ViewChild","static","SliderDirective","elRef","dragEnd","dragStart","newValue","listenerMove","move","listenerStop","stop","mouseDown","start","touchStart","preventDefault","setCursor","stopPropagation","addEventListener","removeEventListener","getX","position","pageX","touches","pageXOffset","getY","pageY","pageYOffset","width","offsetHeight","x","NgModule","declarations","imports","CommonModule","exports","entryComponents"],"mappings":"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","sourcesContent":["export enum ColorFormats {\r\n    HEX,\r\n    RGBA,\r\n    HSLA,\r\n    CMYK\r\n  }","import { EventEmitter, Output } from '@angular/core';\r\nimport { ColorFormats } from '../enums/formats';\r\nimport { ConverterService } from '../services/converter.service';\r\n\r\nexport class Rgba {\r\n  constructor(public r: number, public g: number, public b: number, public a: number) {}\r\n\r\n  public denormalize():Rgba{\r\n    this.r = Math.round(this.r * 255);\r\n    this.g = Math.round(this.g * 255);\r\n    this.b = Math.round(this.b * 255);\r\n    return this;\r\n  }\r\n\r\n  public toString():string{\r\n    this.denormalize();\r\n    let output =  \r\n    'rgb' + \r\n    (this.a != 1 ? 'a(' : '(')+\r\n    this.r + ', ' +\r\n    this.g + ', ' +\r\n    this.b + \r\n    (this.a != 1 ? ', ' + this.a.toPrecision(2) + ')' : ')')\r\n    return output;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport class Hsva {\r\n\r\n  public onChange:EventEmitter<Hsva> = new EventEmitter<Hsva>(true);\r\n\r\n  constructor(public h: number, public s: number, public v: number, public a: number) {\r\n    \r\n  }\r\n\r\n  public onColorChange(value: { s: number, v: number, rgX: number, rgY: number }): void {\r\n    this.s = value.s / value.rgX;\r\n    this.v = value.v / value.rgY;\r\n  }\r\n\r\n  public onHueChange(value: { v: number, rgX: number }): void {\r\n    this.h = value.v / value.rgX;\r\n    // this.sliderH = this.hsva.h;\r\n  }\r\n\r\n  public onValueChange(value: { v: number, rgX: number }): void {\r\n    this.v = value.v / value.rgX;\r\n  }\r\n\r\n  public onAlphaChange(value: { v: number, rgX: number }): void {\r\n    this.a = value.v / value.rgX;\r\n  }\r\n\r\n}\r\n\r\nexport class Hsla {\r\n  constructor(public h: number, public s: number, public l: number, public a: number) {}\r\n  \r\n  public denormalize():Hsla{\r\n    this.h = Math.round(this.h * 360);\r\n    this.s = Math.round(this.s * 100);\r\n    this.l = Math.round(this.l * 100);\r\n    return this;\r\n  }\r\n  public toString():string{\r\n    let output =  \r\n    'hsl' + \r\n    (this.a != 1 ? 'a(': '(') +\r\n    this.h + ', ' +\r\n    this.s + '%, ' +\r\n    this.l + '%' + \r\n    (this.a != 1 ? ', ' + this.a.toPrecision(2) + ')' : ')')\r\n    return output;\r\n  }\r\n\r\n}\r\n\r\nexport class Cmyk {\r\n  constructor(public c: number, public m: number, public y: number, public k: number, public a: number = 1) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Cmyk, Rgba, Hsla, Hsva } from '../clases/formats';\r\n\r\nimport { ColorPickerComponent } from '../components/color-picker/color-picker.component';\r\nimport { ColorFormats } from '../enums/formats';\r\n\r\n@Injectable()\r\nexport class ConverterService {\r\n  // private active: ColorPickerComponent | null = null;\r\n\r\n  constructor() {}\r\n\r\n  // public setActive(active: ColorPickerComponent | null): void {\r\n  //   this.active = active;\r\n  // }\r\n\r\n\r\n  toFormat(hsva:Hsva,format:ColorFormats){\r\n    var output = '';\r\n    switch(format){\r\n      case ColorFormats.HEX:\r\n        var rgba:Rgba = this.hsvaToRgba(hsva);\r\n        rgba.denormalize();\r\n        var output = this.rgbaToHex(rgba,true);\r\n        break;\r\n      case ColorFormats.HSLA:\r\n        var hsla:Hsla = this.hsva2hsla(hsva);\r\n        hsla.denormalize();\r\n        var output = hsla.toString();\r\n        break;\r\n      case ColorFormats.RGBA:\r\n        var rgba:Rgba = this.hsvaToRgba(hsva);\r\n        var output = rgba.toString();\r\n        break;\r\n      case ColorFormats.CMYK:\r\n        var rgba:Rgba = this.hsvaToRgba(hsva);\r\n        var cmyk:Cmyk = this.rgbaToCmyk(rgba);\r\n        break;\r\n    }\r\n    return output;\r\n  }\r\n\r\n  public stringToFormat(color:string, format:ColorFormats){\r\n    var hsva = this.stringToHsva(color,true);\r\n    return this.toFormat(hsva,format);\r\n  }\r\n\r\n\r\n\r\n  public hsva2hsla(hsva: Hsva): Hsla {\r\n    const h = hsva.h, s = hsva.s, v = hsva.v, a = hsva.a;\r\n\r\n    if (v === 0) {\r\n      return new Hsla(h, 0, 0, a);\r\n    } else if (s === 0 && v === 1) {\r\n      return new Hsla(h, 1, 1, a);\r\n    } else {\r\n      const l = v * (2 - s) / 2;\r\n\r\n      return new Hsla(h, v * s / (1 - Math.abs(2 * l - 1)), l, a);\r\n    }\r\n  }\r\n\r\n  public hsla2hsva(hsla: Hsla): Hsva {\r\n    const h = Math.min(hsla.h, 1), s = Math.min(hsla.s, 1);\r\n    const l = Math.min(hsla.l, 1), a = Math.min(hsla.a, 1);\r\n\r\n    if (l === 0) {\r\n      return new Hsva(h, 0, 0, a);\r\n    } else {\r\n      const v = l + s * (1 - Math.abs(2 * l - 1)) / 2;\r\n\r\n      return new Hsva(h, 2 * (v - l) / v, v, a);\r\n    }\r\n  }\r\n\r\n  public hsvaToRgba(hsva: Hsva): Rgba {\r\n    let r: number, g: number, b: number;\r\n\r\n    const h = hsva.h, s = hsva.s, v = hsva.v, a = hsva.a;\r\n\r\n    const i = Math.floor(h * 6);\r\n    const f = h * 6 - i;\r\n    const p = v * (1 - s);\r\n    const q = v * (1 - f * s);\r\n    const t = v * (1 - (1 - f) * s);\r\n\r\n    switch (i % 6) {\r\n      case 0:\r\n        r = v, g = t, b = p;\r\n        break;\r\n      case 1:\r\n        r = q, g = v, b = p;\r\n        break;\r\n      case 2:\r\n        r = p, g = v, b = t;\r\n        break;\r\n      case 3:\r\n        r = p, g = q, b = v;\r\n        break;\r\n      case 4:\r\n        r = t, g = p, b = v;\r\n        break;\r\n      case 5:\r\n        r = v, g = p, b = q;\r\n        break;\r\n      default:\r\n        r = 0, g = 0, b = 0;\r\n    }\r\n\r\n    return new Rgba(r, g, b, a);\r\n  }\r\n\r\n  public cmykToRgb(cmyk: Cmyk): Rgba {\r\n    const r = ( 1 - cmyk.c ) * (1 - cmyk.k);\r\n    const g = ( 1 - cmyk.m ) * (1 - cmyk.k);\r\n    const b = ( 1 - cmyk.y ) * (1 - cmyk.k);\r\n\r\n    return new Rgba(r, g, b, cmyk.a);\r\n  }\r\n\r\n  public rgbaToCmyk(rgba: Rgba): Cmyk {\r\n    const k: number = 1 - Math.max(rgba.r, rgba.g, rgba.b);\r\n\r\n    if (k === 1) {\r\n      return new Cmyk(0, 0, 0, 1, rgba.a);\r\n    } else {\r\n      const c = (1 - rgba.r - k) / (1 - k);\r\n      const m = (1 - rgba.g - k) / (1 - k);\r\n      const y = (1 - rgba.b - k) / (1 - k);\r\n\r\n      return new Cmyk(c, m, y, k, rgba.a);\r\n    }\r\n  }\r\n\r\n  public rgbaToHsva(rgba: Rgba): Hsva {\r\n    let h: number, s: number;\r\n\r\n    const r = Math.min(rgba.r, 1), g = Math.min(rgba.g, 1);\r\n    const b = Math.min(rgba.b, 1), a = Math.min(rgba.a, 1);\r\n\r\n    const max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n\r\n    const v: number = max, d = max - min;\r\n\r\n    s = (max === 0) ? 0 : d / max;\r\n\r\n    if (max === min) {\r\n      h = 0;\r\n    } else {\r\n      switch (max) {\r\n        case r:\r\n          h = (g - b) / d + (g < b ? 6 : 0);\r\n          break;\r\n        case g:\r\n          h = (b - r) / d + 2;\r\n          break;\r\n        case b:\r\n          h = (r - g) / d + 4;\r\n          break;\r\n        default:\r\n          h = 0;\r\n      }\r\n\r\n      h /= 6;\r\n    }\r\n\r\n    return new Hsva(h, s, v, a);\r\n  }\r\n\r\n  public rgbaToHex(rgba: Rgba, allowHex8?: boolean): string {\r\n    /* tslint:disable:no-bitwise */\r\n    let hex = '#' + ((1 << 24) | (rgba.r << 16) | (rgba.g << 8) | rgba.b).toString(16).substr(1);\r\n\r\n    if (rgba.a != 1) {\r\n      hex += ((1 << 8) | Math.round(rgba.a * 255)).toString(16).substr(1);\r\n    }\r\n    /* tslint:enable:no-bitwise */\r\n\r\n    return hex;\r\n  }\r\n\r\n  public normalizeCMYK(cmyk: Cmyk): Cmyk {\r\n    return new Cmyk(cmyk.c / 100, cmyk.m / 100, cmyk.y / 100, cmyk.k / 100, cmyk.a);\r\n  }\r\n\r\n  public denormalizeCMYK(cmyk: Cmyk): Cmyk {\r\n    return new Cmyk(Math.floor(cmyk.c * 100), Math.floor(cmyk.m * 100), Math.floor(cmyk.y * 100),\r\n      Math.floor(cmyk.k * 100), cmyk.a);\r\n  }\r\n\r\n  public denormalizeRGBA(rgba: Rgba): Rgba {\r\n    return new Rgba(Math.round(rgba.r * 255), Math.round(rgba.g * 255), Math.round(rgba.b * 255), rgba.a);\r\n  }\r\n\r\n  public stringToHsva(colorString: string = '', allowHex8: boolean = true): Hsva | null {\r\n    let hsva: Hsva | null = null;\r\n\r\n    colorString = (colorString || '').toLowerCase();\r\n\r\n    const stringParsers = [\r\n      {\r\n        re: /(rgb)a?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*%?,\\s*(\\d{1,3})\\s*%?(?:,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)/,\r\n        parse: function(execResult: any) {\r\n          return new Rgba(parseInt(execResult[2], 10) / 255,\r\n            parseInt(execResult[3], 10) / 255,\r\n            parseInt(execResult[4], 10) / 255,\r\n            isNaN(parseFloat(execResult[5])) ? 1 : parseFloat(execResult[5]));\r\n        }\r\n      }, {\r\n        re: /(hsl)a?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*(?:,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)/,\r\n        parse: function(execResult: any) {\r\n          return new Hsla(parseInt(execResult[2], 10) / 360,\r\n            parseInt(execResult[3], 10) / 100,\r\n            parseInt(execResult[4], 10) / 100,\r\n            isNaN(parseFloat(execResult[5])) ? 1 : parseFloat(execResult[5]));\r\n        }\r\n      }\r\n    ];\r\n\r\n    if (allowHex8) {\r\n      stringParsers.push({\r\n        re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})?$/,\r\n        parse: function(execResult: any) {\r\n          return new Rgba(parseInt(execResult[1], 16) / 255,\r\n            parseInt(execResult[2], 16) / 255,\r\n            parseInt(execResult[3], 16) / 255,\r\n            parseInt(execResult[4] || 'FF', 16) / 255);\r\n        }\r\n      });\r\n    } else {\r\n      stringParsers.push({\r\n        re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/,\r\n        parse: function(execResult: any) {\r\n          return new Rgba(parseInt(execResult[1], 16) / 255,\r\n            parseInt(execResult[2], 16) / 255,\r\n            parseInt(execResult[3], 16) / 255,\r\n            1);\r\n        }\r\n      });\r\n    }\r\n\r\n    stringParsers.push({\r\n      re: /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/,\r\n      parse: function(execResult: any) {\r\n        return new Rgba(parseInt(execResult[1] + execResult[1], 16) / 255,\r\n          parseInt(execResult[2] + execResult[2], 16) / 255,\r\n          parseInt(execResult[3] + execResult[3], 16) / 255,\r\n          1);\r\n      }\r\n    });\r\n\r\n    for (const key in stringParsers) {\r\n      if (stringParsers.hasOwnProperty(key)) {\r\n        const parser = stringParsers[key];\r\n\r\n        const match = parser.re.exec(colorString), color: any = match && parser.parse(match);\r\n\r\n        if (color) {\r\n          if (color instanceof Rgba) {\r\n            hsva = this.rgbaToHsva(color);\r\n          } else if (color instanceof Hsla) {\r\n            hsva = this.hsla2hsva(color);\r\n          }\r\n\r\n          return hsva;\r\n        }\r\n      }\r\n    }\r\n\r\n    return hsva;\r\n  }\r\n\r\n  public outputFormat(hsva: Hsva): string {\r\n\r\n    return this.hsvaToRgba(hsva).toString();\r\n  }\r\n\r\n  public getFormatByString(color: string): string {\r\n    if(color){\r\n      color = color.toLowerCase();\r\n      let regexHex:RegExp = /(#([\\da-f]{3}(?:[\\da-f]{3})?(?:[\\da-f]{2})?))/\r\n      let regexRGBA:RegExp = /(rgba\\((\\d{1,3},\\s?){3}(1|0?\\.\\d+)\\)|rgb\\(\\d{1,3}(,\\s?\\d{1,3}){2}\\))/\r\n      let regexHSLA:RegExp = /(hsla\\((\\d{1,3}%?,\\s?){3}(1|0?\\.\\d+)\\)|hsl\\(\\d{1,3}%?(,\\s?\\d{1,3}%?){2}\\))/\r\n      if(regexHex.test(color)){\r\n        return 'hex'\r\n      }\r\n      else if(regexRGBA.test(color)){\r\n        return 'rgba'\r\n      }\r\n      else if(regexHSLA.test(color)){\r\n        return 'hsla'\r\n      }\r\n    }\r\n    return 'hex'\r\n  }\r\n}\r\n","export const defaultColors = [\r\n    {\r\n        color: \"rojo\", preview: \"#E57373\", variants:\r\n            [\"#FFEBEE\", \"#FFCDD2\", \"#EF9A9A\", \"#E57373\", \"#EF5350\", \"#F44336\", \"#E53935\", \"#D32F2F\", \"#C62828\"]\r\n    },\r\n    {\r\n        color: \"rosa\", preview: \"#F06292\", variants:\r\n            [\"#FCE4EC\", \"#F8BBD0\", \"#F48FB1\", \"#F06292\", \"#EC407A\", \"#E91E63\", \"#D81B60\", \"#C2185B\", \"#AD1457\"]\r\n    },\r\n    {\r\n        color: \"purpura\", preview: \"#BA68C8\", variants:\r\n            [\"#F3E5F5\", \"#E1BEE7\", \"#CE93D8\", \"#BA68C8\", \"#AB47BC\", \"#9C27B0\", \"#8E24AA\", \"#7B1FA2\", \"#6A1B9A\"]\r\n    },\r\n    {\r\n        color: \"purpura oscuro\", preview: \"#9575CD\", variants:\r\n            [\"#EDE7F6\", \"#D1C4E9\", \"#B39DDB\", \"#9575CD\", \"#7E57C2\", \"#673AB7\", \"#5E35B1\", \"#512DA8\", \"#4527A0\"]\r\n    },\r\n    {\r\n        color: \"indigo\", preview: \"#7986CB\", variants:\r\n            [\"#E8EAF6\", \"#C5CAE9\", \"#9FA8DA\", \"#7986CB\", \"#5C6BC0\", \"#3F51B5\", \"#3949AB\", \"#303F9F\", \"#283593\"]\r\n    },\r\n    {\r\n        color: \"azul\", preview: \"#64B5F6\", variants:\r\n            [\"#E3F2FD\", \"#BBDEFB\", \"#90CAF9\", \"#64B5F6\", \"#42A5F5\", \"#2196F3\", \"#1E88E5\", \"#1976D2\", \"#1565C0\"]\r\n    },\r\n    {\r\n        color: \"celeste\", preview: \"#4FC3F7\", variants:\r\n            [\"#E1F5FE\", \"#B3E5FC\", \"#81D4FA\", \"#4FC3F7\", \"#29B6F6\", \"#03A9F4\", \"#039BE5\", \"#0288D1\", \"#0277BD\"]\r\n    },\r\n    {\r\n        color: \"cyan\", preview: \"#4DD0E1\", variants:\r\n            [\"#E0F7FA\", \"#B2EBF2\", \"#80DEEA\", \"#4DD0E1\", \"#26C6DA\", \"#00BCD4\", \"#00ACC1\", \"#0097A7\", \"#00838F\"]\r\n    },\r\n    {\r\n        color: \"color\", preview: \"#4DB6AC\", variants:\r\n            [\"#E0F2F1\", \"#B2DFDB\", \"#80CBC4\", \"#4DB6AC\", \"#26A69A\", \"#009688\", \"#00897B\", \"#00796B\", \"#00695C\"]\r\n    },\r\n    {\r\n        color: \"verde\", preview: \"#81C784\", variants:\r\n            [\"#E8F5E9\", \"#C8E6C9\", \"#A5D6A7\", \"#81C784\", \"#66BB6A\", \"#4CAF50\", \"#43A047\", \"#388E3C\", \"#2E7D32\"]\r\n    },\r\n    {\r\n        color: \"verde claro\", preview: \"#AED581\", variants:\r\n            [\"#F1F8E9\", \"#DCEDC8\", \"#C5E1A5\", \"#AED581\", \"#9CCC65\", \"#8BC34A\", \"#7CB342\", \"#689F38\", \"#558B2F\"]\r\n    },\r\n    {\r\n        color: \"lima\", preview: \"#DCE775\", variants:\r\n            [\"#F9FBE7\", \"#F0F4C3\", \"#E6EE9C\", \"#DCE775\", \"#D4E157\", \"#CDDC39\", \"#C0CA33\", \"#AFB42B\", \"#9E9D24\"]\r\n    },\r\n    {\r\n        color: \"amarillo\", preview: \"#FFF176\", variants:\r\n            [\"#FFFDE7\", \"#FFF9C4\", \"#FFF59D\", \"#FFF176\", \"#FFEE58\", \"#FFEB3B\", \"#FDD835\", \"#FBC02D\", \"#F9A825\"]\r\n    },\r\n    {\r\n        color: \"ambar\", preview: \"#FFD54F\", variants:\r\n            [\"#FFF8E1\", \"#FFECB3\", \"#FFE082\", \"#FFD54F\", \"#FFCA28\", \"#FFC107\", \"#FFB300\", \"#FFA000\", \"#FF8F00\"]\r\n    },\r\n    {\r\n        color: \"naranja\", preview: \"#FFB74D\", variants:\r\n            [\"#FFF3E0\", \"#FFE0B2\", \"#FFCC80\", \"#FFB74D\", \"#FFA726\", \"#FF9800\", \"#FB8C00\", \"#F57C00\", \"#EF6C00\"]\r\n    },\r\n    {\r\n        color: \"naranja oscuro\", preview: \"#FF8A65\", variants:\r\n            [\"#FBE9E7\", \"#FFCCBC\", \"#FFAB91\", \"#FF8A65\", \"#FF7043\", \"#FF5722\", \"#F4511E\", \"#E64A19\", \"#D84315\"]\r\n    },\r\n    {\r\n        color: \"marron\", preview: \"#A1887F\", variants:\r\n            [\"#EFEBE9\", \"#D7CCC8\", \"#BCAAA4\", \"#A1887F\", \"#8D6E63\", \"#795548\", \"#6D4C41\", \"#5D4037\", \"#4E342E\"]\r\n    },\r\n    {\r\n        color: \"escala de grises\", preview: \"#E0E0E0\", variants:\r\n            [\"#FFFFFF\", \"#FAFAFA\", \"#F5F5F5\", \"#EEEEEE\", \"#E0E0E0\", \"#BDBDBD\", \"#9E9E9E\", \"#757575\", \"#616161\", \"#424242\", \"#000000\"]\r\n    },\r\n    {\r\n        color: \"azul gris\", preview: \"#90A4AE\", variants:\r\n            [\"#ECEFF1\", \"#CFD8DC\", \"#B0BEC5\", \"#90A4AE\", \"#78909C\", \"#607D8B\", \"#546E7A\", \"#455A64\", \"#37474F\"]\r\n    }] \r\n","export const formats = ['hex','rgba','hsla']","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef, ViewChild, ElementRef, HostListener, HostBinding } from '@angular/core';\r\nimport { trigger, transition, query, style, stagger, animate, keyframes } from '@angular/animations';\r\nimport { isDescendantOrSame } from '../../helpers/helpers';\r\nimport { ColorFormats } from '../../enums/formats';\r\nimport { ConverterService } from '../../services/converter.service';\r\nimport { defaultColors } from '../../helpers/default-colors';\r\nimport { formats } from '../../helpers/formats';\r\nimport { NgxColorsTriggerDirective } from '../../directives/ngx-colors-trigger.directive';\r\nimport { Hsva } from '../../clases/formats';\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-colors-panel',\r\n  templateUrl: './panel.component.html',\r\n  styleUrls: ['./panel.component.scss'],\r\n  animations: [\r\n    trigger('colorsAnimation', [\r\n      transition('void => slide-in', [\r\n        // Initially all colors are hidden\r\n        query(':enter', style({ opacity: 0 }), { optional: true }),\r\n        //slide-in animation\r\n        query(':enter', stagger('10ms', [\r\n          animate('.3s ease-in', keyframes([\r\n            style({ opacity: 0, transform: 'translatex(-50%)', offset: 0 }),\r\n            style({ opacity: .5, transform: 'translatex(-10px) scale(1.1)', offset: 0.3 }),\r\n            style({ opacity: 1, transform: 'translatex(0)', offset: 1 }),\r\n          ]))]), { optional: true }),\r\n      ]),\r\n      //popup animation\r\n      transition('void => popup', [\r\n        query(':enter', style({ opacity: 0,transform: 'scale(0)' }), { optional: true }),\r\n        query(':enter', stagger('10ms', [\r\n          animate('500ms ease-out', keyframes([\r\n            style({ opacity: .5, transform: 'scale(.5)', offset: 0.3 }),\r\n            style({ opacity: 1, transform: 'scale(1.1)', offset: 0.8 }),\r\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 }),\r\n          ]))]), { optional: true })\r\n      ])\r\n    ]),\r\n    \r\n  ]\r\n})\r\nexport class PanelComponent implements OnInit {\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  click(event) {\r\n    if(this.isOutside(event)) {\r\n      this.emitClose();\r\n    } \r\n  }\r\n\r\n  @HostListener('document:scroll')\r\n  onScroll(){\r\n    this.setPosition()\r\n  }\r\n  @HostListener('window:resize')\r\n  onResize(){\r\n    this.setPosition()\r\n  }\r\n\r\n  @HostBinding('style.top.px') public top: number;\r\n  @HostBinding('style.left.px') public left: number;\r\n\r\n  constructor(\r\n    public service:ConverterService\r\n  )\r\n  {\r\n\r\n  }\r\n\r\n  public color = '#000000';\r\n  public previewColor: string = '#000000';\r\n  public hsva = new Hsva(0,1,1,1)\r\n\r\n  public colorsAnimationEffect = 'slide-in'\r\n\r\n  public palette = defaultColors;\r\n  public variants = [];\r\n\r\n  public colorFormats = formats;\r\n  public format:ColorFormats = ColorFormats.HEX;\r\n \r\n  public canChangeFormat:boolean = true;\r\n    \r\n  public menu = 1;\r\n\r\n  public hideColorPicker:boolean = false;\r\n  public hideTextInput:boolean = false;\r\n  public acceptLabel:string;\r\n\r\n  private triggerInstance:NgxColorsTriggerDirective;\r\n  private triggerElementRef;\r\n  \r\n\r\n\r\n\r\n  public ngOnInit(){\r\n    this.setPosition();\r\n    this.hsva = this.service.stringToHsva(this.color);\r\n  }\r\n\r\n\r\n  public iniciate(triggerInstance:NgxColorsTriggerDirective,triggerElementRef,color,palette,animation,format:string, hideTextInput:boolean, hideColorPicker:boolean, acceptLabel:string){\r\n      this.triggerInstance = triggerInstance;\r\n      this.triggerElementRef = triggerElementRef;\r\n      this.color = color;\r\n      this.hideColorPicker = hideColorPicker;\r\n      this.hideTextInput = hideTextInput;\r\n      this.acceptLabel = acceptLabel;\r\n      if(format){\r\n        if(formats.includes(format)){\r\n          this.format = formats.indexOf(format.toLowerCase());\r\n          this.canChangeFormat = false;\r\n          if(this.service.getFormatByString(this.color) != format.toLowerCase()){\r\n            \r\n            this.setColor(this.service.stringToHsva(this.color));\r\n          }\r\n        }\r\n        else{\r\n          console.error('Format provided is invalid, using HEX');\r\n          this.format = ColorFormats.HEX;\r\n        }\r\n      }\r\n      else{\r\n        this.format = formats.indexOf(this.service.getFormatByString(this.color));\r\n      }\r\n      \r\n      this.previewColor = this.color;\r\n      this.palette = palette ?? defaultColors;\r\n      this.colorsAnimationEffect = animation;\r\n  }\r\n\r\n  public setPosition() {\r\n    if(this.triggerElementRef){\r\n      var viewportOffset = this.triggerElementRef.nativeElement.getBoundingClientRect();\r\n      this.top = viewportOffset.top + viewportOffset.height;\r\n      this.left = viewportOffset.left + 250 > window.innerWidth ? viewportOffset.right - 250 : viewportOffset.left;\r\n    }\r\n  }\r\n  public hasVariant(color):boolean{\r\n    if(!this.previewColor){\r\n      return false;\r\n    }\r\n    return typeof color != 'string' && color.variants.some(v => v.toUpperCase() == this.previewColor.toUpperCase() );\r\n  }\r\n\r\n  public isSelected(color){\r\n    if(!this.previewColor){\r\n      return false;\r\n    }\r\n    return typeof color == 'string' && color.toUpperCase() == this.previewColor.toUpperCase();\r\n  }\r\n\r\n  public getBackgroundColor(color){\r\n    if(typeof color == 'string'){\r\n      return { 'background': color };\r\n    }\r\n    else{\r\n      return { 'background': color.preview };\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Change color from default colors\r\n   * @param string color\r\n   */\r\n  public changeColor(color: string): void {\r\n    this.setColor(this.service.stringToHsva(color));\r\n    // this.triggerInstance.onChange();\r\n    this.emitClose();\r\n  }\r\n\r\n  public onChangeColorPicker(event:Hsva) {\r\n    this.setColor(event);\r\n    // this.triggerInstance.onChange();\r\n  }\r\n\r\n  public changeColorManual(color: string): void {\r\n      this.previewColor = color;\r\n      this.color = color;\r\n      this.hsva = this.service.stringToHsva(color);\r\n      this.triggerInstance.setColor(this.color);\r\n      // this.triggerInstance.onChange();\r\n  }\r\n\r\n  setColor(value:Hsva){\r\n    this.hsva = value;\r\n    this.color = this.service.toFormat(value,this.format);\r\n    this.setPreviewColor(value);\r\n    this.triggerInstance.setColor(this.color);\r\n  }\r\n\r\n\r\n  setPreviewColor(value:Hsva){\r\n    this.previewColor = this.service.hsvaToRgba(value).toString();\r\n  }\r\n\r\n  onChange(){\r\n    // this.triggerInstance.onChange();\r\n  }\r\n  \r\n  public showColors(){\r\n    this.menu = 1;\r\n  }\r\n\r\n  public onColorClick(color){\r\n    if(typeof color == 'string'){\r\n      this.changeColor(color);\r\n    }\r\n    else{\r\n      this.variants = color.variants;\r\n      this.menu = 2;\r\n    }\r\n  }\r\n\r\n  public addColor(){\r\n    this.menu = 3;\r\n  }\r\n\r\n  public nextFormat(){\r\n    if(this.canChangeFormat){\r\n      this.format = (this.format + 1) % this.colorFormats.length;\r\n      this.setColor(this.hsva);\r\n    }\r\n  }\r\n\r\n\r\n  public emitClose(){\r\n    this.triggerInstance.close();\r\n  }\r\n\r\n \r\n\r\n  isOutside(event){\r\n        return event.target.classList.contains('ngx-colors-overlay');\r\n  }\r\n\r\n  \r\n\r\n\r\n}\r\n","import { Injectable, ComponentFactoryResolver, Injector, Inject, TemplateRef, Type, ComponentFactory, ApplicationRef, EmbeddedViewRef, ComponentRef } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { PanelComponent } from '../components/panel/panel.component';\r\n\r\n@Injectable()\r\nexport class PanelFactoryService {\r\n  constructor(\r\n    private resolver: ComponentFactoryResolver,\r\n    private applicationRef: ApplicationRef,\r\n    private injector: Injector,\r\n  ) { }\r\n\r\n  \r\n\r\n  componentRef: ComponentRef<PanelComponent>;\r\n  _factory:ComponentFactory<PanelComponent>;\r\n  overlay;\r\n    \r\n\r\n\r\n  createPanel():ComponentRef<PanelComponent> { \r\n    \r\n    if(this.componentRef != undefined){\r\n      this.removePanel();\r\n    }\r\n    const factory: ComponentFactory<PanelComponent> = this.resolver.resolveComponentFactory(PanelComponent);\r\n    \r\n    this.componentRef = factory.create(this.injector);\r\n    this.applicationRef.attachView(this.componentRef.hostView);\r\n    const domElem = (this.componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n\r\n    this.overlay = document.createElement('div');\r\n    this.overlay.id = \"ngx-colors-overlay\";\r\n    this.overlay.classList.add('ngx-colors-overlay');\r\n    document.body.appendChild(this.overlay);\r\n    this.overlay.appendChild(domElem);\r\n\r\n    return this.componentRef;\r\n  }\r\n\r\n   removePanel() {\r\n    this.applicationRef.detachView(this.componentRef.hostView);\r\n    this.componentRef.destroy();\r\n    this.overlay.remove();\r\n  }\r\n}","import { EventEmitter,Input, Output, Directive, ElementRef, ComponentRef, HostListener, forwardRef } from '@angular/core';\r\nimport { PanelFactoryService } from '../services/panel-factory.service';\r\nimport { PanelComponent } from '../components/panel/panel.component';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { NgxColor } from '../clases/color';\r\n\r\n@Directive({\r\n  selector: '[ngx-colors-trigger]',\r\n  providers: [\r\n    { \r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NgxColorsTriggerDirective),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class NgxColorsTriggerDirective implements ControlValueAccessor{\r\n\r\n\r\n  //Main input/output of the color picker\r\n  // @Input() color = '#000000';\r\n  // @Output() colorChange:EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  color = '';\r\n\r\n\r\n  //This defines the type of animation for the palatte.(slide-in | popup)\r\n  @Input() colorsAnimation:'slide-in' | 'popup' = 'slide-in';\r\n\r\n  //This is used to set a custom palette of colors in the panel;\r\n  @Input() palette:Array<string> | Array<NgxColor>;\r\n\r\n  @Input() format:string;\r\n  @Input() hideTextInput:boolean;\r\n  @Input() hideColorPicker:boolean;\r\n  @Input() acceptLabel:string = 'ACCEPT';\r\n  // This event is trigger every time the selected color change\r\n  @Output() change:EventEmitter<string> = new EventEmitter<string>();\r\n  // This event is trigger every time the user change the color using the panel\r\n  @Output() input:EventEmitter<string> = new EventEmitter<string>();\r\n\r\n\r\n  @HostListener('click') onClick(){\r\n    this.open();\r\n  }\r\n  constructor(\r\n    private triggerRef:ElementRef,\r\n    private panelFactory:PanelFactoryService,\r\n  ) \r\n  {\r\n  }\r\n\r\n  panelRef:ComponentRef<PanelComponent>\r\n\r\n  onTouchedCallback: () => void = () => {};\r\n  onChangeCallback: (_: any) => void = () => {};\r\n\r\n\r\n  open(){\r\n    this.panelRef = this.panelFactory.createPanel();\r\n    this.panelRef.instance.iniciate(this,this.triggerRef,this.color,this.palette,this.colorsAnimation,this.format, this.hideTextInput, this.hideColorPicker,this.acceptLabel);\r\n  }\r\n\r\n  public close(){\r\n    this.panelFactory.removePanel();\r\n  }\r\n\r\n  public onChange(){\r\n    this.onChangeCallback(this.color);\r\n  }\r\n\r\n\r\n  public setColor(color){\r\n    this.writeValue(color);\r\n    this.input.emit(color);\r\n  }\r\n\r\n  get value():string{\r\n      return this.color;\r\n  }\r\n\r\n  set value(value:string){\r\n      this.setColor(value);\r\n      this.onChangeCallback(value);\r\n  }\r\n\r\n\r\n  writeValue(value){\r\n    if(value !== this.color){\r\n      this.color = value;\r\n      this.onChange();\r\n      this.change.emit(value);\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any) {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any) {\r\n      this.onTouchedCallback = fn;\r\n  }\r\n\r\n\r\n}\r\n","import { Component, ViewEncapsulation, Host, OnInit } from '@angular/core';\r\nimport { NgxColorsTriggerDirective } from './directives/ngx-colors-trigger.directive';\r\n\r\n@Component({\r\n  selector: 'ngx-colors',\r\n  templateUrl: './ngx-colors.component.html',\r\n  styleUrls: ['./ngx-colors.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  \r\n})\r\nexport class NgxColorsComponent implements OnInit{\r\n\r\n  constructor(\r\n    @Host() private triggerDirective: NgxColorsTriggerDirective,\r\n  )\r\n  {\r\n  }\r\n\r\n  // @ViewChild(NgxColorsTriggerDirective) triggerDirective;\r\n  ngOnInit(): void {\r\n    this.triggerDirective.change.subscribe(\r\n      color => {this.color = color;}\r\n    );\r\n  }\r\n  //IO color\r\n  color: string = this.triggerDirective.color;\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'icons',\r\n  templateUrl: './icons.component.html',\r\n  styleUrls: ['./icons.component.css']\r\n})\r\nexport class IconsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  @Input() icon: string;\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export class SliderPosition {\r\n    constructor(public h: number, public s: number, public v: number, public a: number) {}\r\n}\r\n  \r\nexport class SliderDimension {\r\n    constructor(public h: number, public s: number, public v: number, public a: number) {}\r\n}","import {\r\n  Component, OnInit, OnDestroy, AfterViewInit,\r\n  ViewChild, ViewEncapsulation,\r\n  ElementRef, ChangeDetectorRef, Input, Output, EventEmitter, OnChanges\r\n} from '@angular/core';\r\n\r\nimport { Cmyk, Hsla, Hsva, Rgba } from '../../clases/formats';\r\nimport { ColorFormats } from '../../enums/formats';\r\nimport { SliderDimension, SliderPosition } from '../../clases/slider';\r\n\r\nimport { ConverterService } from '../../services/converter.service';\r\n\r\n@Component({\r\n  selector: 'color-picker',\r\n  templateUrl: './color-picker.component.html',\r\n  styleUrls: ['./color-picker.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ColorPickerComponent implements OnInit, OnDestroy, AfterViewInit,OnChanges {\r\n  \r\n\r\n  //IO color\r\n  @Input()  color: Hsva = new Hsva(0,1,1,1);\r\n  @Output() colorChange:EventEmitter<Hsva> = new EventEmitter<Hsva>(false);\r\n  //Event triggered when any slider change\r\n  // @Output() colorSelectedChange:EventEmitter<Hsva> = new EventEmitter<Hsva>(false); \r\n\r\n  private hsva: Hsva = new Hsva(0,1,1,1);\r\n  private outputColor: Hsva;\r\n  public selectedColor: string = '#000000';\r\n  private fallbackColor: string = '#000000';\r\n\r\n  // private sHue: number;\r\n  private sliderDimMax: SliderDimension;\r\n  public slider: SliderPosition;\r\n\r\n\r\n  public hueSliderColor: string;\r\n  public alphaSliderColor: string;\r\n\r\n\r\n  @ViewChild('hueSlider', { static: true }) hueSlider: ElementRef;\r\n  @ViewChild('alphaSlider', { static: true }) alphaSlider: ElementRef;\r\n\r\n  constructor(\r\n    private service: ConverterService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    if(!this.color){\r\n      this.color = new Hsva(0,1,1,1);\r\n    }\r\n    this.slider = new SliderPosition(0, 0, 0, 0);\r\n    const hueWidth = this.hueSlider.nativeElement.offsetWidth || 140;\r\n    const alphaWidth = this.alphaSlider.nativeElement.offsetWidth || 140;\r\n    this.sliderDimMax = new SliderDimension(hueWidth, 220, 130, alphaWidth);\r\n    // this.setColorFromString((this.color || this.fallbackColor));\r\n    this.update();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n\r\n  }\r\n\r\n  ngOnChanges(changes: any): void {\r\n    if(changes.color && this.color){\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n  }\r\n\r\n  public onSliderChange(type:string, event){\r\n    switch(type){\r\n      case 'saturation-lightness':\r\n        this.hsva.onColorChange(event);\r\n        break;\r\n      case 'hue':\r\n        this.hsva.onHueChange(event);\r\n        break;\r\n      case 'alpha':\r\n        this.hsva.onAlphaChange(event);\r\n        break;\r\n      case 'value':\r\n        this.hsva.onValueChange(event);\r\n        break;\r\n    }\r\n    // this.sHue = this.hsva.h;\r\n    this.update();\r\n    this.setColor(this.outputColor);\r\n  }\r\n\r\n  setColor(color) {\r\n    this.color = color\r\n    this.colorChange.emit(this.color);\r\n  }\r\n\r\n  private update(): void {\r\n\r\n    this.hsva = this.color;\r\n    if (this.sliderDimMax) {\r\n      let rgba = this.service.hsvaToRgba(this.hsva).denormalize();\r\n      let hue = this.service.hsvaToRgba(new Hsva(this.hsva.h, 1, 1, 1)).denormalize();\r\n\r\n      this.hueSliderColor = 'rgb(' + hue.r + ',' + hue.g + ',' + hue.b + ')';\r\n      this.alphaSliderColor = 'rgb(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ')';\r\n\r\n      this.outputColor = this.hsva;\r\n      this.selectedColor = this.service.hsvaToRgba(this.hsva).toString();\r\n    \r\n\r\n      this.slider = new SliderPosition(\r\n        // (this.sHue || this.hsva.h) * this.sliderDimMax.h - 8,\r\n        this.hsva.h * this.sliderDimMax.h - 8,\r\n        this.hsva.s * this.sliderDimMax.s - 8,\r\n        (1 - this.hsva.v) * this.sliderDimMax.v - 8,\r\n        this.hsva.a * this.sliderDimMax.a - 8\r\n      );\r\n      \r\n    }\r\n  }\r\n}\r\n","import { Input, Directive, Output, EventEmitter, HostListener, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[slider]'\r\n  })\r\n  export class SliderDirective {\r\n    private listenerMove: any;\r\n    private listenerStop: any;\r\n  \r\n    @Input() rgX: number;\r\n    @Input() rgY: number;\r\n  \r\n    @Input() slider: string;\r\n  \r\n    @Output() dragEnd = new EventEmitter();\r\n    @Output() dragStart = new EventEmitter();\r\n  \r\n    @Output() newValue = new EventEmitter<any>();\r\n  \r\n    @HostListener('mousedown', ['$event']) mouseDown(event: any): void {\r\n      this.start(event);\r\n    }\r\n  \r\n    @HostListener('touchstart', ['$event']) touchStart(event: any): void {\r\n      this.start(event);\r\n    }\r\n  \r\n    constructor(private elRef: ElementRef) {\r\n      this.listenerMove = (event: any) => this.move(event);\r\n  \r\n      this.listenerStop = () => this.stop();\r\n    }\r\n  \r\n    private move(event: any): void {\r\n      event.preventDefault();\r\n  \r\n      this.setCursor(event);\r\n    }\r\n  \r\n    private start(event: any): void {\r\n      this.setCursor(event);\r\n  \r\n      event.stopPropagation();\r\n  \r\n      document.addEventListener('mouseup', this.listenerStop);\r\n      document.addEventListener('touchend', this.listenerStop);\r\n      document.addEventListener('mousemove', this.listenerMove);\r\n      document.addEventListener('touchmove', this.listenerMove);\r\n  \r\n      this.dragStart.emit();\r\n    }\r\n  \r\n    private stop(): void {\r\n      document.removeEventListener('mouseup', this.listenerStop);\r\n      document.removeEventListener('touchend', this.listenerStop);\r\n      document.removeEventListener('mousemove', this.listenerMove);\r\n      document.removeEventListener('touchmove', this.listenerMove);\r\n  \r\n      this.dragEnd.emit();\r\n    }\r\n  \r\n    private getX(event: any): number {\r\n      const position = this.elRef.nativeElement.getBoundingClientRect();\r\n  \r\n      const pageX = (event.pageX !== undefined) ? event.pageX : event.touches[0].pageX;\r\n  \r\n      return pageX - position.left - window.pageXOffset;\r\n    }\r\n  \r\n    private getY(event: any): number {\r\n      const position = this.elRef.nativeElement.getBoundingClientRect();\r\n  \r\n      const pageY = (event.pageY !== undefined) ? event.pageY : event.touches[0].pageY;\r\n  \r\n      return pageY - position.top - window.pageYOffset;\r\n    }\r\n  \r\n    private setCursor(event: any): void {\r\n      const width = this.elRef.nativeElement.offsetWidth;\r\n      const height = this.elRef.nativeElement.offsetHeight;\r\n  \r\n      const x = Math.max(0, Math.min(this.getX(event), width));\r\n      const y = Math.max(0, Math.min(this.getY(event), height));\r\n  \r\n      if (this.rgX !== undefined && this.rgY !== undefined) {\r\n        this.newValue.emit({ s: x / width, v: (1 - y / height), rgX: this.rgX, rgY: this.rgY });\r\n      } else if (this.rgX === undefined && this.rgY !== undefined) {\r\n        this.newValue.emit({ v: y / height, rgY: this.rgY });\r\n      } else if (this.rgX !== undefined && this.rgY === undefined) {\r\n        this.newValue.emit({ v: x / width, rgX: this.rgX });\r\n      }\r\n    }\r\n  }","import { NgModule } from '@angular/core';\r\nimport { NgxColorsComponent } from './ngx-colors.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IconsComponent } from './components/icons/icons.component';\r\nimport { ColorPickerComponent } from './components/color-picker/color-picker.component';\r\nimport { ConverterService } from './services/converter.service';\r\nimport { SliderDirective } from './directives/slider.directive';\r\nimport { PanelComponent } from './components/panel/panel.component';\r\nimport { PanelFactoryService } from './services/panel-factory.service';\r\nimport { NgxColorsTriggerDirective } from './directives/ngx-colors-trigger.directive';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [NgxColorsComponent, IconsComponent,ColorPickerComponent, SliderDirective, PanelComponent, NgxColorsTriggerDirective],\r\n  imports: [\r\n    \r\n    CommonModule\r\n  ],\r\n  providers: [ConverterService,PanelFactoryService],\r\n  exports: [NgxColorsComponent,NgxColorsTriggerDirective],\r\n  entryComponents:[PanelComponent,ColorPickerComponent]\r\n})\r\nexport class NgxColorsModule { }\r\n","export class NgxColor {\r\n    preview: string;\r\n    variants: Array<string>;\r\n}"]}